from aiogram import types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import update_user_role, UserRole
from keyboards import admin_keyboard
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from database import get_session, User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Session –∏ –º–æ–¥–µ–ª—å User –∏–∑ database.py
from sqlalchemy import select
import logging
from database import UserRole
from database import get_user

router = Router()


class ChangeRole(StatesGroup):
    waiting_for_key = State()


@router.message(Command("role"))
async def role_command(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if user and user.role != UserRole.BANNED:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /role."""
        await state.clear()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        await state.set_state(ChangeRole.waiting_for_key)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. üö´")


@router.message(ChangeRole.waiting_for_key)
async def process_key(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞."""
    key = message.text
    telegram_id = message.from_user.id

    if key == "123":  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
        if update_user_role(telegram_id, UserRole.ADMIN):
            await message.answer("–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=admin_keyboard())
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.")

    await state.clear()


def register_handlers(dp):
    dp.include_router(router)
