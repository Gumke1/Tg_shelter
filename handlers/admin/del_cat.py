from aiogram import types, Router
from database import get_user, UserRole
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_cat_by_identifier, delete_cat  # Import delete_cat

router = Router()


class DeleteCat(StatesGroup):
    waiting_for_identifier = State()
    confirmation = State()


@router.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–æ—Ç–∏–∫–∞üìù‚ûñ")
async def deletecat_command(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if user and user.role == UserRole.ADMIN:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ identifier –∫–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        await state.set_state(DeleteCat.waiting_for_identifier)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. üö´")


@router.message(DeleteCat.waiting_for_identifier)
async def process_identifier(message: types.Message, state: FSMContext):
    identifier = message.text
    cat = get_cat_by_identifier(identifier)

    if cat:
        await state.update_data(cat_id=cat.id)  # Store the cat's ID
        # Create confirmation keyboard
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="–î–∞", callback_data="confirm:yes"),
                types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm:no"),
            ]
        ])
        await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ—Ç–∞ {cat.name} (id: {cat.id})?", reply_markup=keyboard)
        await state.set_state(DeleteCat.confirmation)
    else:
        await message.answer("–ö–æ—Ç —Å —Ç–∞–∫–∏–º identifier –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()


@router.callback_query(DeleteCat.confirmation)
async def process_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    confirmation = callback_query.data.split(":")[1]
    data = await state.get_data()
    cat_id = data.get("cat_id")
    await callback_query.answer()  # Remove loading animation
    if confirmation == "yes":
        if delete_cat(cat_id):
            await callback_query.message.answer("–ö–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—Ç–∞.")
    else:
        await callback_query.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    await state.clear()


def register_handlers(dp):
    dp.include_router(router)
