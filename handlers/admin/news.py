# admin_handlers.py
from keyboards import admin_keyboard
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from database import get_session, User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Session –∏ –º–æ–¥–µ–ª—å User –∏–∑ database.py
from sqlalchemy import select
import logging
from database import UserRole
from database import get_user

router = Router()


class NewsForm(StatesGroup):
    text = State()





@router.message(lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å üì¢ ‚ûï")
async def start_news_sending(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if user and user.role == UserRole.ADMIN:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:")
        await state.set_state(NewsForm.text)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. üö´")

@router.message(NewsForm.text)
async def process_news_text(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(text=message.text)
    data = await state.get_data()
    news_text = data["text"]

    db = None
    try:
        user = get_user(message.from_user.id)
        if user and user.role == UserRole.ADMIN:
            db = get_session()
            if db is None:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
                return

            query = select(User.telegram_id).where(User.role == UserRole.USER)
            result = db.execute(query)
            print(result)
            user_ids = result.scalars().all()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º scalars().all()
            print(user_ids, 1)
            for user_id in user_ids:
                try:
                    await bot.send_message(chat_id=user_id, text=news_text)
                    print(user_ids)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            await message.answer("–ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

    except Exception as e:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏.")
    finally:
        if db:
            db.close()


def register_handlers(dp):
    dp.include_router(router)
