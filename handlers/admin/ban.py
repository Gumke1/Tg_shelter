from aiogram import types, Router

from database import get_user, update_user_role, UserRole  # Import get_user
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()

class BanUser(StatesGroup):
    waiting_for_id = State()  # Changed state to waiting_for_id

@router.message(lambda message: message.text == "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ üë§ üîíÔ∏è")
async def ban_command(message: types.Message, state: FSMContext):
    """Handler for /ban command to start the process of banning a user."""
    user = get_user(message.from_user.id)

    if user and user.role == UserRole.ADMIN:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:")  # Changed prompt
        await state.set_state(BanUser.waiting_for_id)  # Changed state
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. üö´")

@router.message(BanUser.waiting_for_id)  # Changed state
async def process_user_id(message: types.Message, state: FSMContext):
    """Handler to get the user ID and ban the user."""
    try:
        user_id_to_ban = int(message.text)  # Get and parse the user ID as integer
        user_to_ban = get_user(user_id_to_ban)  # Search for user by telegram_id

        if user_to_ban:
            if update_user_role(user_to_ban.telegram_id, UserRole.BANNED):  # Ban by telegram_id
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id_to_ban} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. ‚úÖ")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ùì")

        await state.clear()

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        await state.clear()

def register_handlers(dp):
    dp.include_router(router)